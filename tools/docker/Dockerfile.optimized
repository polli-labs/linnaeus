# ───────────────────────────────────────────────────
# Linnaeus Dev/Training Container (GPU‑optimized)
# Base: CUDA 12.4.1 + cuDNN 9 on Ubuntu 22.04
# ───────────────────────────────────────────────────
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

LABEL maintainer="Caleb Sowers <caleb@polli.ai>"
LABEL description="Linnaeus training container: PyTorch + Flash‑Attention + CUDA 12.4.1"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=Etc/UTC \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    CONFIG_DIR=/app/linnaeus/configs \
    PATH="/root/.local/bin:${PATH}" \
    CUDA_HOME=/usr/local/cuda \
    # Flash-Attention compilation settings
    MAX_JOBS=4 \
    TORCH_CUDA_ARCH_LIST="7.5;8.0;8.6;8.9;9.0"

# Set working directory early
WORKDIR /app

# 1) System dependencies & ninja for Flash‑Attention
RUN apt-get update && apt-get install -y --no-install-recommends \
      python3 python3-pip python3-dev build-essential git curl ca-certificates \
      ninja-build htop vim openssh-client rclone \
    && rm -rf /var/lib/apt/lists/* \
    && ln -sf /usr/bin/python3 /usr/bin/python

# 2) Upgrade pip/toolchain first
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel

# 3) Install PyTorch CUDA 12.4 wheels
RUN pip3 install --no-cache-dir torch torchvision torchaudio \
      --index-url https://download.pytorch.org/whl/cu124

# 4) Preinstall Flash-Attention dependencies
RUN pip3 install --no-cache-dir packaging ninja einops

# 5) Install Flash-Attention (this step may take 10-30 minutes)
# Using multiple strategies to make the build more reliable
RUN pip3 install --no-cache-dir flash-attn --no-build-isolation \
    || (echo "First attempt failed, retrying with verbose output..." && \
        pip3 install -v --no-cache-dir flash-attn --no-build-isolation)

# 6) Install uv for dependency management
RUN pip3 install --no-cache-dir uv

# 7) Copy & install Linnaeus & dependencies
COPY pyproject.toml ./
COPY linnaeus/ ./linnaeus/
COPY configs/ ./configs/

# Use regular pip for the main package to avoid uv issues
RUN pip3 install --no-cache-dir -e .[dev]

# 8) Copy & install ibrida
COPY ibrida /app/ibrida
RUN cd /app/ibrida && pip3 install --no-cache-dir -e .

ENV PYTHONPATH="/app:${PYTHONPATH:-}"

# Final working directory
WORKDIR /app/linnaeus

# Expose ports for TensorBoard
EXPOSE 6006

# SSH Configuration
RUN mkdir -p /root/.ssh && chmod 700 /root/.ssh && \
    ssh-keyscan github.com >> /root/.ssh/known_hosts && \
    chmod 600 /root/.ssh/known_hosts

# 9) Final verification
RUN python3 -c "import torch, flash_attn; print('Torch:', torch.__version__, 'CUDA:', torch.version.cuda); print('FlashAttention:', flash_attn.__version__)"

CMD ["python", "-c", "import torch, linnaeus; print('Ready:', torch.__version__, linnaeus.__version__)"]

# ─── TODO (public‑repo milestone) ───────────────────────────────
# Replace COPY lines with:
# RUN git clone --depth 1 https://github.com/polli-labs/linnaeus.git /app/linnaeus
# RUN git clone --depth 1 https://github.com/polli-labs/ibrida.git   /app/ibrida